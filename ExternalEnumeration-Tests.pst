<?xml version="1.0"?><st-source><!-- Name: ExternalEnumeration-TestsNotice: The MIT License (MIT)Copyright (c) 2014 Randy CoulmanPermission is hereby granted, free of charge, to any person obtaining a copyof this software and associated documentation files (the "Software"), to dealin the Software without restriction, including without limitation the rightsto use, copy, modify, merge, publish, distribute, sublicense, and/or sellcopies of the Software, and to permit persons to whom the Software isfurnished to do so, subject to the following conditions:The above copyright notice and this permission notice shall be included in allcopies or substantial portions of the Software.THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS ORIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THEAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHERLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THESOFTWARE.Comment: ExternalEnumeration is licensed under the MIT license.  See the copyright tabin the RB, the 'notice' property of this package, or the LICENSEfile on GitHub.This package contains the unit tests for ExternalEnumeration.  See that package'scomment for more information.DbIdentifier: /Users/randy/repositories/store/RCSmalltalkDbTrace: 1673DbUsername: randyDbVersion: 1DevelopmentPrerequisites: #(#(#any 'Base VisualWorks' '') #(#any 'ExternalEnumeration' '') #(#any 'SUnitToo' ''))PackageName: ExternalEnumeration-TestsParcel: #('ExternalEnumeration-Tests')PrerequisiteDescriptions: #(#(#name 'Base VisualWorks' #componentType #bundle) #(#name 'ExternalEnumeration' #componentType #package) #(#name 'SUnitToo' #componentType #package))PrerequisiteParcels: #(#('Base VisualWorks' '') #('ExternalEnumeration' '') #('SUnitToo' ''))PrintStringCache: (1,randy)Version: 1Date: 8:04:13 AM April 23, 2014 --><time-stamp>From VisualWorksÂ® Personal Use Edition, 7.9.1 of October 18, 2012 on April 23, 2014 at 8:04:13 AM</time-stamp><do-it>(Dialog confirm: 'You are filing-in a Parcel source file!\\While this is possible it will not have\the same effect as loading the parcel.\None of the Parcel''s prerequisites will\be loaded and none of its load actions\will be performed.\\Are you sure you want to file-in?' withCRs) ifFalse: [self error: 'Parcel file-in abandoned.  Choose terminate or close.']</do-it><class><name>TestingTarget</name><environment>ExternalEnumeration</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>values </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>ExternalEnumeration-Tests</package></attributes></class><class><name>EnumeratorTest</name><environment>ExternalEnumeration</environment><super>SUnit.TestCase</super><private>false</private><indexed-type>none</indexed-type><inst-vars>enumerator </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>ExternalEnumeration-Tests</package></attributes></class><methods><class-id>ExternalEnumeration.TestingTarget</class-id> <category>initialize-release</category><body package="ExternalEnumeration-Tests">initializeValues: anArray 	values := anArray</body></methods><methods><class-id>ExternalEnumeration.TestingTarget</class-id> <category>enumerating</category><body package="ExternalEnumeration-Tests">valuesDo: aBlock 	^values do: aBlock</body></methods><methods><class-id>ExternalEnumeration.TestingTarget class</class-id> <category>instance creation</category><body package="ExternalEnumeration-Tests">values: anArray 	^self new initializeValues: anArray</body></methods><methods><class-id>ExternalEnumeration.EnumeratorTest</class-id> <category>initialize-release</category><body package="ExternalEnumeration-Tests">setUp	| target |	super setUp.	target := TestingTarget values: #(1 2 3 4 5).	enumerator := Enumerator on: target selector: #valuesDo:</body></methods><methods><class-id>ExternalEnumeration.EnumeratorTest</class-id> <category>private</category><body package="ExternalEnumeration-Tests">arrayEnumerator	| target |	target := TestingTarget values: #(1 2 3 4 5).	^Enumerator on: target selector: #valuesDo: species: Array</body><body package="ExternalEnumeration-Tests">setEnumerator	| target |	target := TestingTarget values: #(1 1 1 2 3 3 4 5 5).	^Enumerator on: target selector: #valuesDo: species: Set</body></methods><methods><class-id>ExternalEnumeration.EnumeratorTest</class-id> <category>tests</category><body package="ExternalEnumeration-Tests">allSatisfyFails	&lt;test&gt;	self deny: (enumerator allSatisfy: #odd)</body><body package="ExternalEnumeration-Tests">allSatisfySucceeds	&lt;test&gt;	self assert: (enumerator allSatisfy: [:each | each &lt; 10])</body><body package="ExternalEnumeration-Tests">anySatisfyFails	&lt;test&gt;	self deny: (enumerator anySatisfy: [:each | each &gt; 10])</body><body package="ExternalEnumeration-Tests">anySatisfySucceeds	&lt;test&gt;	self assert: (enumerator anySatisfy: #odd)</body><body package="ExternalEnumeration-Tests">collects	&lt;test&gt;	self assert: ((enumerator collect: [:each | each * 2])				isSameSequenceAs: #(2 4 6 8 10))</body><body package="ExternalEnumeration-Tests">collectsIntoArray	&lt;test&gt;	self		assert: (self arrayEnumerator collect: [:each | each * 2]) = #(2 4 6 8 10)</body><body package="ExternalEnumeration-Tests">collectsIntoSet	&lt;test&gt;	self assert: (self setEnumerator collect: [:each | each * 2])				= (Set withAll: #(2 4 6 8 10))</body><body package="ExternalEnumeration-Tests">detects	&lt;test&gt;	self assert: (enumerator detect: #odd) = 1</body><body package="ExternalEnumeration-Tests">detectsWithFoundBlock	&lt;test&gt;	self assert: (enumerator detect: #odd ifFound: [:value | value * 2]) = 2</body><body package="ExternalEnumeration-Tests">detectsWithTwoBlocks	&lt;test&gt;	self		assert: (enumerator				detect: #odd				ifFound: [:value | value * 2]				ifNone: [#notFound]) = 2</body><body package="ExternalEnumeration-Tests">enumeratesWithDo	&lt;test&gt;	| enumerated |	enumerated := OrderedCollection new.	enumerator do: [:each | enumerated add: each].	self assert: (enumerated isSameSequenceAs: #(1 2 3 4 5))</body><body package="ExternalEnumeration-Tests">enumeratesWithSeparatorBlock	&lt;test&gt;	| ws |	ws := String new writeStream.	enumerator do: [:each | ws print: each] separatedBy: [ws space].	self assert: ws contents = '1 2 3 4 5'</body><body package="ExternalEnumeration-Tests">evaluatesNotFoundBlockOnFailedDetect	&lt;test&gt;	self		assert: (enumerator detect: #isString ifNone: [#notFound]) == #notFound</body><body package="ExternalEnumeration-Tests">evaluatesNotFoundBlockOnFailedDetectWithTwoBlocks	&lt;test&gt;	self		assert: (enumerator				detect: #isString				ifFound: []				ifNone: [#notFound]) == #notFound</body><body package="ExternalEnumeration-Tests">folds	&lt;test&gt;	self assert: (enumerator fold: [:a :b | a + b]) = 15</body><body package="ExternalEnumeration-Tests">groups	&lt;test&gt;	| groups |	groups := enumerator groupedBy: #odd.	self		assert: groups size = 2;		assert: ((groups at: true) isSameSequenceAs: #(1 3 5));		assert: ((groups at: false) isSameSequenceAs: #(2 4))</body><body package="ExternalEnumeration-Tests">groupsIntoArray	&lt;test&gt;	| groups |	groups := self arrayEnumerator groupedBy: #odd.	self		assert: groups size = 2;		assert: (groups at: true) = #(1 3 5);		assert: (groups at: false) = #(2 4)</body><body package="ExternalEnumeration-Tests">groupsIntoSet	&lt;test&gt;	| groups |	groups := self setEnumerator groupedBy: #odd.	self		assert: groups size = 2;		assert: (groups at: true) = (Set withAll: #(1 3 5));		assert: (groups at: false) = (Set withAll: #(2 4))</body><body package="ExternalEnumeration-Tests">injectsInto	&lt;test&gt;	self assert: (enumerator inject: 0 into: [:sum :each | sum + each]) = 15</body><body package="ExternalEnumeration-Tests">raisesErrorOnFailedDetect	&lt;test&gt;	self should: [enumerator detect: #isString] raise: Object notFoundSignal</body><body package="ExternalEnumeration-Tests">raisesErrorWhenFoldingAnEmptyEnumerator	&lt;test&gt;	| target |	target := TestingTarget values: #().	enumerator := Enumerator on: target selector: #valuesDo:.	self should: [enumerator fold: [:a :b | a + b]] raise: Error</body><body package="ExternalEnumeration-Tests">rejects	&lt;test&gt;	self assert: ((enumerator reject: #odd) isSameSequenceAs: #(2 4))</body><body package="ExternalEnumeration-Tests">returnsNilOnFailedDetectIfFound	&lt;test&gt;	self		assert: (enumerator detect: #isString ifFound: [self assert: false]) isNil</body><body package="ExternalEnumeration-Tests">selects	&lt;test&gt;	self assert: ((enumerator select: #odd) isSameSequenceAs: #(1 3 5))</body><body package="ExternalEnumeration-Tests">selectsIntoArray	&lt;test&gt;	self assert: (self arrayEnumerator select: #odd) = #(1 3 5)</body><body package="ExternalEnumeration-Tests">selectsIntoSet	&lt;test&gt;	self assert: (self setEnumerator select: #odd) = (Set withAll: #(1 3 5))</body></methods><do-it>"Imported Classes:"</do-it><do-it>self error: 'Attempting to file-in parcel imports.  Choose terminate or close'</do-it><class><name>Object</name><environment>Core</environment><super></super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Kernel-Objects</category><attributes><package>Kernel-Objects</package></attributes></class><class><name>TestCase</name><environment>SUnit</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>testSelector </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SUnit</category><attributes><package>SUnitToo</package></attributes></class></st-source>